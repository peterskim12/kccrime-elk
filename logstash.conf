input {
  	stdin {
			codec => json_lines {}
	}
}

filter {

  if [from_date] {
  	grok {
  		match => {
        "from_date" => "%{YEAR:from_year}-%{MONTHNUM:from_month}-%{MONTHDAY:from_day}"
      }
  	}

    # fix records that don't contain times
    if ![from_time] {
      mutate {
        add_field => {
          "from_time" => "00:00"
        }
      }
    }

    # fix bad time values
    if [from_time] =~ /^24:\d\d/ {
      mutate {
        replace => ["from_time", "00:00"]
      }
    }

    grok {
      match => {
        "from_time" => "%{HOUR:from_hour}:%{MINUTE:from_minute}"
      }
    }

    # adjust for invalid times during DST transition
    if [from_year] == "2013" and [from_month] == "03" and [from_day] == "10" and ([from_hour] == "02" or [from_hour] == "2") {
      mutate {
        replace => ["from_time", "03:%{from_minute}"]
      }
    } else if [from_year] == "2012" and [from_month] == "03" and [from_day] == "11" and ([from_hour] == "02" or [from_hour] == "2") {
      mutate {
        replace => ["from_time", "03:%{from_minute}"]
      }
    } else if [from_year] == "2011" and [from_month] == "03" and [from_day] == "13" and ([from_hour] == "02" or [from_hour] == "2") {
      mutate {
        replace => ["from_time", "03:%{from_minute}"]
      }
    } else if [from_year] == "2010" and [from_month] == "03" and [from_day] == "14" and ([from_hour] == "02" or [from_hour] == "2") {
      mutate {
        replace => ["from_time", "03:%{from_minute}"]
      }
    } else if [from_year] == "2009" and [from_month] == "03" and [from_day] == "08" and ([from_hour] == "02" or [from_hour] == "2") {
      mutate {
        replace => ["from_time", "03:%{from_minute}"]
      }
    }

    mutate {
      add_field => {
        "from_datetime" => "%{from_year}-%{from_month}-%{from_day} %{from_time}"
      }
    }

    date {
      match => [ "from_datetime", "YYYY-MM-dd HH:mm", "YYYY-MM-dd H:mm"]
      timezone => "America/Chicago"
      target => "from_timestamp"
      remove_field => ["from_datetime"]
    }
  }

  if [to_date] {
    grok {
  		match => {
        "to_date" => "%{YEAR:to_year}-%{MONTHNUM:to_month}-%{MONTHDAY:to_day}"
      }
  	}

    # fix records that don't contain times
    if ![to_time] {
      mutate {
        add_field => {
          "to_time" => "00:00"
        }
      }
    }

    # fix bad time values
    if [to_time] =~ /^24:\d\d/ {
      mutate {
        replace => ["to_time", "00:00"]
      }
    }

    grok {
      match => {
        "to_time" => "%{HOUR:to_hour}:%{MINUTE:to_minute}"
      }
    }

    # adjust for invalid times during DST transition
    if [to_year] == "2015" and [to_month] == "03" and [to_day] == "08" and [to_hour] == "02" {
      mutate {
        replace => ["to_time", "03:%{to_minute}"]
      }
    } else if [to_year] == "2013" and [to_month] == "03" and [to_day] == "10" and ([to_hour] == "02" or [to_hour] == "2") {
      mutate {
        replace => ["to_time", "03:%{to_minute}"]
      }
    } else if [to_year] == "2012" and [to_month] == "03" and [to_day] == "11" and ([to_hour] == "02" or [to_hour] == "2") {
      mutate {
        replace => ["to_time", "03:%{to_minute}"]
      }
    } else if [to_year] == "2011" and [to_month] == "03" and [to_day] == "13" and ([to_hour] == "02" or [to_hour] == "2") {
      mutate {
        replace => ["to_time", "03:%{to_minute}"]
      }
    } else if [to_year] == "2010" and [to_month] == "03" and [to_day] == "14" and ([to_hour] == "02" or [to_hour] == "2") {
      mutate {
        replace => ["to_time", "03:%{to_minute}"]
      }
    } else if [to_year] == "2009" and [to_month] == "03" and [to_day] == "08" and ([to_hour] == "02" or [to_hour] == "2") {
      mutate {
        replace => ["to_time", "03:%{to_minute}"]
      }
    }



    mutate {
      add_field => {
        "to_datetime" => "%{to_year}-%{to_month}-%{to_day} %{to_time}"
      }
    }

    date {
      match => [ "to_datetime", "YYYY-MM-dd HH:mm", "YYYY-MM-dd H:mm"]
      timezone => "America/Chicago"
      target => "to_timestamp"
      remove_field => ["to_datetime"]
    }
  }


  if [reported_date] {
    grok {
  		match => {
        "reported_date" => "%{YEAR:reported_year}-%{MONTHNUM:reported_month}-%{MONTHDAY:reported_day}"
      }
  	}

    # fix records that don't contain times
    if ![reported_time] {
      mutate {
        add_field => {
          "reported_time" => "00:00"
        }
      }
    }

    # fix bad time values
    if [reported_time] =~ /^24:\d\d/ {
      mutate {
        replace => ["reported_time", "00:00"]
      }
    }

    mutate {
      add_field => {
        "reported_datetime" => "%{reported_year}-%{reported_month}-%{reported_day} %{reported_time}"
      }
    }

    grok {
      match => {
        "reported_time" => "%{HOUR:reported_hour}:%{MINUTE:reported_minute}"
      }
    }

    date {
      match => [ "reported_datetime", "YYYY-MM-dd HH:mm", "YYYY-MM-dd H:mm"]
      timezone => "America/Chicago"
      target => "reported_timestamp"
      remove_field => ["reported_datetime"]
    }
  }

  if [latitude] and [longitude] {
    mutate {
      add_field => {
        "coords" => "%{latitude},%{longitude}"
      }
    }
  }

  # some years' files use the field name area_1, some use area
  mutate {
    rename => { "area_1" => "area"}
    rename => { "dvflag_1" => "dvflag"}
    rename => { "age_1" => "age"}
    rename => { "invl_no_1" => "invl_no"}
    rename => { "involvement_1" => "involvement"}
    rename => { "race_1" => "race"}
    rename => { "rep_dist_1" => "rep_dist"}
    rename => { "sex_1" => "sex"}
    rename => { "zip_code_1" => "zip_code"}
    convert => { "age" => "integer"}
  }

}

output {
  # stdout { codec => rubydebug }
  stdout { codec => dots }
  elasticsearch {
  	protocol => http
  	host => "localhost"
  	index => "kccrime-%{reported_year}"
    document_type => "incidents"
  	template => "index_template.json"
  	template_name => "kccrime"
  	template_overwrite => true
  }
}
